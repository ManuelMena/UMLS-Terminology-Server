/*
 *    Copyright 2015 West Coast Informatics, LLC
 */
package com.wci.umls.server.jpa.algo.insert;

import java.io.File;
import java.util.List;
import java.util.Properties;
import java.util.UUID;

import javax.persistence.NoResultException;

import com.wci.umls.server.AlgorithmParameter;
import com.wci.umls.server.ProcessExecution;
import com.wci.umls.server.ValidationResult;
import com.wci.umls.server.helpers.ConfigUtility;
import com.wci.umls.server.jpa.ValidationResultJpa;
import com.wci.umls.server.jpa.algo.AbstractMergeAlgorithm;
import com.wci.umls.server.jpa.services.ProcessServiceJpa;
import com.wci.umls.server.services.ProcessService;

/**
 * Implementation of an algorithm to save information before an insertion.
 */
public class PreInsertionAlgorithm extends AbstractMergeAlgorithm {

  /**
   * Instantiates an empty {@link PreInsertionAlgorithm}.
   * @throws Exception if anything goes wrong
   */
  public PreInsertionAlgorithm() throws Exception {
    super();
    setActivityId(UUID.randomUUID().toString());
    setWorkId("PREINSERTION");
    setLastModifiedBy("admin");
  }

  /**
   * Check preconditions.
   *
   * @return the validation result
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public ValidationResult checkPreconditions() throws Exception {

    ValidationResult validationResult = new ValidationResultJpa();

    if (getProject() == null) {
      throw new Exception("Pre Insertion requires a project to be set");
    }
    
    //TODO - go through all the files insertion needs and check for presence
    // Check the input directories

    String srcFullPath =
        ConfigUtility.getConfigProperties().getProperty("source.data.dir")
            + File.separator + getProcess().getInputPath();

    setSrcDirFile(new File(srcFullPath));
    if (!getSrcDirFile().exists()) {
      throw new Exception("Specified input directory does not exist");
    }
    
    //TODO - etc.

    return validationResult;
  }

  /**
   * Compute.
   *
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public void compute() throws Exception {
    logInfo("Starting PREINSERTION");

    // No Molecular actions will be generated by this algorithm
    setMolecularActionFlag(false);

    // Populate the executionInfo map of the process' execution.
    ProcessExecution processExecution = getProcess();

    // Get the max atom Id prior to the insertion starting (used to identify
    // which atoms are new)
    Long atomId = null;
    try {
      final javax.persistence.Query query =
          manager.createQuery("select max(a.id) from AtomJpa a ");
      final Long atomId2 = (Long) query.getSingleResult();
      atomId = atomId2 != null ? atomId2 : atomId;
    } catch (NoResultException e) {
      atomId = 0L;
    }
    processExecution.getExecutionInfo().put("maxAtomIdPreInsertion",
        atomId.toString());
    
    //TODO - write to log
    //TODO - also get maxStyIdPreInsertion

    ProcessService processService = new ProcessServiceJpa();
    processService.setLastModifiedBy("admin");
    processService.updateProcessExecution(processExecution);

    
    logInfo(" project = " + getProject().getId());
    logInfo(" workId = " + getWorkId());
    logInfo(" activityId = " + getActivityId());
    logInfo(" user = " + getLastModifiedBy());
    logInfo("Finished PREINSERTION");
  }

  /**
   * Reset.
   *
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public void reset() throws Exception {
    // n/a - No reset
  }

  /* see superclass */
  @Override
  public void checkProperties(Properties p) throws Exception {
    // n/a
  }

  /* see superclass */
  @Override
  public void setProperties(Properties p) throws Exception {
    // n/a
  }

  /* see superclass */
  @Override
  public List<AlgorithmParameter> getParameters() {
    final List<AlgorithmParameter> params = super.getParameters();

    return params;
  }
}