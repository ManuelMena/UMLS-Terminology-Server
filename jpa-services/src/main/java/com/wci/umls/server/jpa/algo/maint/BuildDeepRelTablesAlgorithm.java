/*
 *    Copyright 2015 West Coast Informatics, LLC
 */
package com.wci.umls.server.jpa.algo.maint;

import java.util.List;
import java.util.Properties;
import java.util.UUID;

import org.hibernate.Session;

import com.wci.umls.server.AlgorithmParameter;
import com.wci.umls.server.ValidationResult;
import com.wci.umls.server.jpa.ValidationResultJpa;
import com.wci.umls.server.jpa.algo.AbstractInsertMaintReleaseAlgorithm;

/**
 * Implementation of an algorithm to rebuild the deepRels fact table
 */
public class BuildDeepRelTablesAlgorithm
    extends AbstractInsertMaintReleaseAlgorithm {

  /**
   * Instantiates an empty {@link BuildDeepRelTablesAlgorithm}.
   * @throws Exception if anything goes wrong
   */
  public BuildDeepRelTablesAlgorithm() throws Exception {
    super();
    setActivityId(UUID.randomUUID().toString());
    setWorkId("BUILDDEEPRELTABLES");
    setLastModifiedBy("admin");
  }

  /**
   * Check preconditions.
   *
   * @return the validation result
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public ValidationResult checkPreconditions() throws Exception {

    ValidationResult validationResult = new ValidationResultJpa();

    if (getProject() == null) {
      throw new Exception("Algorithms requires a project to be set");
    }

    return validationResult;
  }

  /**
   * Compute.
   *
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public void compute() throws Exception {
    logInfo("Starting " + getName());

    // No Molecular actions will be generated by this algorithm
    setMolecularActionFlag(false);

    final Session session = manager.unwrap(Session.class);    
    
    // The rebuild involves:
    // Truncating the 2 tables
    // 6 separate insertion queries to be performed in sequence

    String query = "TRUNCATE TABLE deep_atom_relationships;";
    logInfo("Performing: " + query);
    commitClearBegin();
    javax.persistence.Query jpaQuery =
        getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();
    
    query = "TRUNCATE TABLE deep_concept_relationships;";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_atom_relationships SELECT id AS relationship_id, 'ATOM' as component_type, terminologyId, terminology, version, relationshipType, additionalRelationshipType, obsolete, suppressible, published, publishable, workflowStatus, lastModifiedby, lastModified, from_id AS from_atoms_id, to_id AS to_atoms_id FROM atom_relationships WHERE publishable=true AND workflowStatus in ('PUBLISHED','READY_FOR_PUBLICATION') AND from_id < to_id;";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_atom_relationships SELECT id AS relationship_id, 'CONCEPT' as component_type, terminologyId,terminology,version, relationshipType, additionalRelationshipType, obsolete, suppressible, published, publishable, workflowStatus, lastModifiedby, lastModified, ca1.atoms_id AS from_atoms_id, ca2.atoms_id AS to_atoms_id FROM concept_relationships cr, concepts_atoms ca1, concepts_atoms ca2 WHERE publishable=true AND cr.workflowStatus in ('PUBLISHED','READY_FOR_PUBLICATION') AND cr.from_id = ca1.concepts_id AND cr.to_id = ca2.concepts_id AND cr.from_id < cr.to_id; ";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_atom_relationships SELECT id AS relationship_id, 'CODE' as component_type, terminologyId,terminology,version, relationshipType, additionalRelationshipType, obsolete, suppressible, published, publishable, workflowStatus, lastModifiedby, lastModified, ca1.atoms_id AS from_atoms_id, ca2.atoms_id AS to_atoms_id FROM code_relationships cr, codes_atoms ca1, codes_atoms ca2 WHERE publishable=true AND workflowStatus in ('PUBLISHED','READY_FOR_PUBLICATION') AND cr.from_id = ca1.codes_id AND cr.to_id = ca2.codes_id AND from_id < to_id; ";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_atom_relationships SELECT id AS relationship_id, 'DESCRIPTOR' as component_type, terminologyId,terminology,version, relationshipType, additionalRelationshipType, obsolete, suppressible, published, publishable, workflowStatus, lastModifiedby, lastModified, from_id AS from_atoms_id, to_id AS to_atoms_id FROM descriptor_relationships WHERE publishable=true AND workflowStatus in ('PUBLISHED','READY_FOR_PUBLICATION') AND from_id < to_id; ";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_concept_relationships SELECT id AS relationship_id,'CONCEPT' as component_type, terminologyId,terminology,version, relationshipType, additionalRelationshipType, obsolete,suppressible,published,publishable, workflowStatus,lastModifiedby,lastModified, from_id AS from_concepts_id, to_id AS to_concepts_id FROM concept_relationships WHERE publishable=true AND workflowStatus in ('PUBLISHED','READY_FOR_PUBLICATION') AND from_id < to_id; ";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_concept_relationships SELECT DISTINCT dar.relationship_id, dar.component_type, dar.terminologyId, dar.terminology, dar.version, dar.relationshipType, dar.additionalRelationshipType, dar.obsolete, dar.suppressible, dar.published, dar.publishable, dar.workflowStatus, dar.lastModifiedby, dar.lastModified, ca1.concepts_id AS from_concepts_id, ca2.concepts_id AS to_concepts_id FROM deep_atom_relationships dar, concepts_atoms ca1, concepts_atoms ca2 WHERE dar.from_atoms_id = ca1.atoms_id AND dar.to_atoms_id = ca2.atoms_id; ";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    commitClearBegin();

    logInfo("Finished " + getName());

  }

  /* see superclass */
  @Override
  public void reset() throws Exception {
    logInfo("Starting RESET " + getName());
    // n/a - No reset
    logInfo("Finished RESET " + getName());
  }

  /* see superclass */
  @Override
  public void checkProperties(Properties p) throws Exception {
    // n/a
  }

  /* see superclass */
  @Override
  public void setProperties(Properties p) throws Exception {

  }

  /**
   * Returns the parameters.
   *
   * @return the parameters
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public List<AlgorithmParameter> getParameters() throws Exception {
    final List<AlgorithmParameter> params = super.getParameters();

    return params;
  }

  /* see superclass */
  @Override
  public String getDescription() {
    return "Rebuild the deep relationship tables";
  }

}