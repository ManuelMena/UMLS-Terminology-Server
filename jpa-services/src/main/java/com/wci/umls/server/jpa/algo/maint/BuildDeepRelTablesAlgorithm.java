/*
 *    Copyright 2015 West Coast Informatics, LLC
 */
package com.wci.umls.server.jpa.algo.maint;

import java.util.List;
import java.util.Properties;
import java.util.UUID;

import org.hibernate.Session;

import com.wci.umls.server.AlgorithmParameter;
import com.wci.umls.server.ValidationResult;
import com.wci.umls.server.jpa.ValidationResultJpa;
import com.wci.umls.server.jpa.algo.AbstractInsertMaintReleaseAlgorithm;

/**
 * Implementation of an algorithm to rebuild the deepRels fact table
 */
public class BuildDeepRelTablesAlgorithm
    extends AbstractInsertMaintReleaseAlgorithm {

  /**
   * Instantiates an empty {@link BuildDeepRelTablesAlgorithm}.
   * @throws Exception if anything goes wrong
   */
  public BuildDeepRelTablesAlgorithm() throws Exception {
    super();
    setActivityId(UUID.randomUUID().toString());
    setWorkId("BUILDDEEPRELTABLES");
    setLastModifiedBy("admin");
  }

  /**
   * Check preconditions.
   *
   * @return the validation result
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public ValidationResult checkPreconditions() throws Exception {

    ValidationResult validationResult = new ValidationResultJpa();

    if (getProject() == null) {
      throw new Exception("Algorithms requires a project to be set");
    }

    return validationResult;
  }

  /**
   * Compute.
   *
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public void compute() throws Exception {
    logInfo("Starting " + getName());

    // No Molecular actions will be generated by this algorithm
    setMolecularActionFlag(false);

    final Session session = manager.unwrap(Session.class);    
    
    // The rebuild involves:
    // Dropping the 2 tables
    // Recreating the 2 tables
    // 6 separate insertion queries to be performed in sequence

    String query = "DROP TABLE if exists deep_atom_relationships;";
    logInfo("Performing: " + query);
    commitClearBegin();
    javax.persistence.Query jpaQuery =
        getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();
    
    query = "DROP TABLE if exists deep_concept_relationships;";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();
    
    query =
        "CREATE TABLE if not exists deep_atom_relationships (relationship_id BIGINT(20), atoms_id BIGINT(20), component_type VARCHAR(20), role VARCHAR(10), INDEX atoms_ind (atoms_id)) ENGINE=INNODB;";
    logInfo("Performing: " + query);
    commitClearBegin();
    session.createSQLQuery(query).executeUpdate();

    query =
        "CREATE TABLE if not exists deep_concept_relationships ( relationship_id BIGINT(20), concepts_id BIGINT(20), component_type VARCHAR(20), role VARCHAR(10), INDEX concepts_ind (concepts_id)) ENGINE=INNODB;";
    logInfo("Performing: " + query);
    commitClearBegin();
    session.createSQLQuery(query).executeUpdate();


    query =
        "INSERT INTO deep_atom_relationships SELECT id as relationship_id, from_id as atoms_id, 'ATOM' as component_type, 'FROM' as role FROM atom_relationships WHERE publishable=true;";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_atom_relationships SELECT id as relationship_id, ca.atoms_id as atoms_id,  'CONCEPT' as component_type, 'FROM' as role FROM concept_relationships cr, concepts_atoms ca  WHERE publishable=true AND cr.from_id = ca.concepts_id;";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_atom_relationships SELECT id as relationship_id, from_id as atoms_id,  'CODE' as component_type, 'FROM' as role FROM code_relationships cr, codes_atoms ca WHERE publishable=true AND cr.from_id = ca.codes_id;";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_atom_relationships SELECT id as relationship_id, from_id as atoms_id,  'DESCRIPTOR' as component_type, 'FROM' as role FROM descriptor_relationships dr WHERE publishable=true;";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_concept_relationships SELECT id as relationship_id, from_id as component_id,  'CONCEPT' as component_type, 'FROM' as role FROM concept_relationships WHERE publishable=true;";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    query =
        "INSERT INTO deep_concept_relationships SELECT dar.relationship_id, ca.concepts_id, dar.component_type, dar.role FROM deep_atom_relationships dar, concepts_atoms ca WHERE dar.atoms_id = ca.atoms_id;";
    logInfo("Performing: " + query);
    commitClearBegin();
    jpaQuery = getEntityManager().createNativeQuery(query);
    jpaQuery.executeUpdate();

    commitClearBegin();

    logInfo("Finished " + getName());

  }

  /* see superclass */
  @Override
  public void reset() throws Exception {
    logInfo("Starting RESET " + getName());
    // n/a - No reset
    logInfo("Finished RESET " + getName());
  }

  /* see superclass */
  @Override
  public void checkProperties(Properties p) throws Exception {
    // n/a
  }

  /* see superclass */
  @Override
  public void setProperties(Properties p) throws Exception {

  }

  /**
   * Returns the parameters.
   *
   * @return the parameters
   * @throws Exception the exception
   */
  /* see superclass */
  @Override
  public List<AlgorithmParameter> getParameters() throws Exception {
    final List<AlgorithmParameter> params = super.getParameters();

    return params;
  }

  /* see superclass */
  @Override
  public String getDescription() {
    return "Rebuild the deep relationship tables";
  }

}