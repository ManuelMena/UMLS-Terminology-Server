<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- Module Metadata -->
  <parent>
    <groupId>com.wci.umls.server</groupId>
    <artifactId>term-server-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../../parent</relativePath>
  </parent>

  <artifactId>term-server-admin-qa</artifactId>
  <name>UMLS terminology server admin QA tool.</name>
  <description>Used for performing system wide QA checks</description>
  <packaging>pom</packaging>

  <profiles>


    <!-- Database QA, specify -Drun.config.umls=... -->
    <profile>
      <id>Database</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.wci.umls.server</groupId>
            <artifactId>term-server-admin-mojo</artifactId>
            <executions>
              <execution>
                <id>qa-database</id>
                <phase>package</phase>
                <goals>
                  <goal>qa-database</goal>
                </goals>
                <configuration>
                  <!-- Queries should select >1 fields to avoid issues -->
                  <queries>

                    <property>
                      <name>Validate active concept default preferred names -
                        SNOMEDCT</name>
                      <value>
                        SELECT terminologyId, defaultPreferredName
                        FROM
                        concepts a
                        WHERE a.active = 1 AND terminology =
                        'SNOMEDCT' AND NOT EXISTS
                        (SELECT * FROM descriptions b,
                        language_refset_members c
                        WHERE a.id =
                        b.concept_id
                        AND
                        b.active = 1 AND c.active =
                        1
                        AND b.id = c.description_id
                        AND
                        b.typeId='900000000000003001'
                        AND c.refSetId =
                        '900000000000509007'
                        AND c.acceptabilityId =
                        '900000000000548007'
                        AND a.defaultPreferredName =
                        b.term);
                      </value>
                    </property>

                    <property>
                      <name>Validate concept default preferred names - not
                        SNOMEDCT</name>
                      <value>
                        SELECT terminologyId, defaultPreferredName
                        FROM
                        concepts a
                        WHERE terminology != 'SNOMEDCT' AND NOT EXISTS
                        (SELECT * FROM descriptions b
                        WHERE a.id = b.concept_id
                        AND a.defaultPreferredName = b.term);
                      </value>
                    </property>

                    <property>
                      <name>Duplicate relationships from
                        source/destination/group/type</name>
                      <value>
                        SELECT a.terminologyId, b.terminologyId,
                        a.relationshipGroup, a.typeId,
                        a.terminology
                        FROM
                        relationships a, concepts b, concepts c
                        WHERE
                        a.sourceConcept_id = b.id and a.destinationConcept_id =
                        c.id
                        GROUP BY a.terminologyId, b.terminologyId,
                        a.relationshipGroup,
                        a.typeId, a.terminology
                        HAVING
                        count(*)>1;
                      </value>
                    </property>

                    <!-- validate content-metadata -->
                    <property>
                      <name>Atom referential integrity - codeId</name>
                      <value>
                        SELECT codeId FROM atoms
                        WHERE codeId not in (select
                        terminologyId from codes);
                      </value>
                    </property>
                    <property>
                      <name>Atom referential integrity - descriptorId</name>
                      <value>
                        SELECT descriptorId FROM atoms
                        WHERE descriptorId
                        not in (select terminologyId from descriptors);
                      </value>
                    </property>
                    <property>
                      <name>Atom referential integrity - conceptId</name>
                      <value>
                        SELECT conceptId FROM atoms
                        WHERE conceptId not in
                        (select terminologyId from concepts);
                      </value>
                    </property>
                    <property>
                      <name>Atom referential integrity - lexicalClassId</name>
                      <value>
                        SELECT lexicalClassId FROM atoms
                        WHERE
                        lexicalClassId not in
                        (select terminologyId from
                        lexical_classes);
                      </value>
                    </property>
                    <property>
                      <name>Atom referential integrity - stringClassId</name>
                      <value>
                        SELECT stringClassId FROM atoms
                        WHERE stringClassId
                        not in
                        (select terminologyId from string_classes);
                      </value>
                    </property>
                    <property>
                      <name>Atom referential integrity - language</name>
                      <value>
                        SELECT language FROM atoms
                        WHERE language not in
                        (select abbreviation from languages);
                      </value>
                    </property>
                    <property>
                      <name>Atom referential integrity - termType</name>
                      <value>
                        SELECT termType FROM atoms
                        WHERE termType not in
                        (select abbreviation from term_types);
                      </value>
                    </property>

                    <property>
                      <name>Atom relationship referential integrity -
                        additionalRelationshipType</name>
                      <value>
                        SELECT additionalRelationshipType FROM
                        atom_relationships
                        WHERE additionalRelationshipType not
                        in
                        (select abbreviation from
                        additional_relationship_types);
                      </value>
                    </property>
                    <property>
                      <name>Atom relationship referential integrity -
                        relationshipType</name>
                      <value>
                        SELECT relationshipType FROM atom_relationships
                        WHERE relationshipType not in
                        (select abbreviation from
                        relationship_types);
                      </value>
                    </property>

                    <property>
                      <name>Concept relationship referential integrity -
                        additionalRelationshipType</name>
                      <value>
                        SELECT additionalRelationshipType FROM
                        concept_relationships
                        WHERE additionalRelationshipType
                        not
                        in
                        (select abbreviation from
                        additional_relationship_types);
                      </value>
                    </property>
                    <property>
                      <name>Concept relationship referential integrity -
                        relationshipType</name>
                      <value>
                        SELECT relationshipType FROM concept_relationships
                        WHERE relationshipType not in
                        (select abbreviation from
                        relationship_types);
                      </value>
                    </property>

                    <property>
                      <name>Descriptor relationship referential integrity -
                        additionalRelationshipType</name>
                      <value>
                        SELECT additionalRelationshipType FROM
                        descriptor_relationships
                        WHERE additionalRelationshipType
                        not
                        in
                        (select abbreviation from
                        additional_relationship_types);
                      </value>
                    </property>
                    <property>
                      <name>Descriptor relationship referential integrity -
                        relationshipType</name>
                      <value>
                        SELECT relationshipType FROM
                        descriptor_relationships
                        WHERE relationshipType not in
                        (select abbreviation from relationship_types);
                      </value>
                    </property>

                    <property>
                      <name>Attribute referential integrity - attributeName</name>
                      <value>
                        SELECT name FROM attributes WHERE name not in
                        (select abbreviation from attribute_names);
                      </value>
                    </property>

                    <property>
                      <name>Semantic type referential integrity - semanticType</name>
                      <value>
                        SELECT semanticType FROM semantic_type_components
                        WHERE semanticType not in
                        (select value from
                        semantic_types);
                      </value>
                    </property>

                    <property>
                      <name>Semantic type referential integrity -
                        relationshipType</name>
                      <value>
                        SELECT semanticType FROM semantic_type_components
                        WHERE semanticType not in
                        (select value from
                        semantic_types);
                      </value>
                    </property>

                    <property>
                      <name>Concept referential integrity - defaultPreferredName</name>
                      <value>
                        SELECT defaultPreferredName FROM concepts a
                        WHERE
                        NOT EXISTS
                        (SELECT * FROM atoms b, atom_concept_map c
                        WHERE b.id = c.atom_id
                        AND c.conceptTerminologyIdMap = a.terminologyId);
                      </value>
                    </property>

                    <property>
                      <name>Code referential integrity - defaultPreferredName</name>
                      <value>
                        SELECT defaultPreferredName FROM codes a
                        WHERE NOT
                        EXISTS
                        (SELECT * FROM atoms b
                        WHERE b.codeId = a.terminologyId);
                      </value>
                    </property>
                    <property>
                      <name>Descriptor referential integrity -
                        defaultPreferredName</name>
                      <value>
                        SELECT defaultPreferredName FROM descriptors a
                        WHERE NOT EXISTS
                        (SELECT * FROM atoms b
                        WHERE b.descriptorId = a.terminologyId);
                      </value>
                    </property>
                    <property>
                      <name>Lexical class referential integrity -
                        defaultPreferredName</name>
                      <value>
                        SELECT defaultPreferredName FROM lexical_classes a
                        WHERE NOT EXISTS
                        (SELECT * FROM atoms b
                        WHERE b.lexicalClassId = a.terminologyId);
                      </value>
                    </property>
                    <property>
                      <name>String class referential integrity -
                        defaultPreferredName</name>
                      <value>
                        SELECT defaultPreferredName FROM string_classes a
                        WHERE NOT EXISTS
                        (SELECT * FROM atoms b
                        WHERE b.stringClassId = a.terminologyId);
                      </value>
                    </property>

                    <property>
                      <name>Relationship type without inverse</name>
                      <value>
                        SELECT abbreviation, expandedForm from
                        relationship_types
                        WHERE inverse IS NULL;
                      </value>
                    </property>
                    <property>
                      <name>Additional relationship type without inverse</name>
                      <value>
                        SELECT abbreviation, expandedForm from
                        additional_relationship_types
                        WHERE inverse IS NULL;
                      </value>
                    </property>

                    <!-- Validate projects -->
                    <!-- Validate release info -->

                  </queries>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>


  </profiles>
</project>